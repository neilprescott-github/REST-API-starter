#Create the File Structure
#Create a folder for this tutorial and create YAML files for the todo list Pod and the Secret (which we'll refer to as credentials):

mkdir k8s-tutorial-secrets && cd $_
touch todo.yaml credentials.yaml
#Create the Secret
#Copy the following manifest template into credentials.yaml:

#####credentials.yaml
apiVersion: v1
kind: Secret
metadata:
  name: credentials          # Secret will be referenceable by the name 'credentials'
type: Opaque
stringData:
  secret-key: {{SECRET_KEY}} # {{SECRET_KEY}} will be substituted for our secret key
####end

#Using sed to substitute the {{SECRET_KEY}} value in, apply the Secret with this command:
sed 's,{{SECRET_KEY}},super-secret-key,g' credentials.yaml | kubectl apply -f -
#View the Secret's Manifest
#After creating the Secret, you can view the manifest as it is stored in the cluster by running:

kubectl get secret credentials -o yaml                                                                                 
#You should see the following output:


####Output
apiVersion: v1
data:
  secret-key: c3VwZXItc2VjcmV0LWtleQ==
kind: Secret
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{},"name":"credentials","namespace":"default"},"stringData":{"secret-key":"280owegfowuye"},"type":"Opaque"}
  creationTimestamp: "2021-08-06T10:47:14Z"
  name: credentials
  namespace: default
  resourceVersion: "223277"
  selfLink: /api/v1/namespaces/default/secrets/credentials
  uid: 6ddbe910-ecf2-49b8-9904-9ecdea4ce51a
type: Opaque
####end

#If you are on a Linux distribution with the base64 CLI tool installed, you can decode the value of secret-key with:
echo kbrgzektyvgroy9hni== | base64 --decode
#Which should output super-secret-key. Remember: Secrets are stored encoded, not encrypted.

#Create a Pod
#Copy the following Service and Pod manifest into the todo.yaml file:

####todo.yaml
apiVersion: v1
kind: Service
metadata:
  name: todo
spec:
  selector:
    app: todo
  type: LoadBalancer
  ports:
  - name: todo
    protocol: TCP
    port: 5000
    targetPort: 5000
---
apiVersion: v1
kind: Pod
metadata:
  name: todo
  labels:
    app: todo
spec:
  containers:
  - name: todo
    image: htrvolker/todo-app:sqlite
    env:
    - name: SECRET_KEY            # The app is designed to get the secret key 
      valueFrom:                  # from an environment variable
        secretKeyRef:
          name: credentials       # Referencing the Secret's name
          key: secret-key         # Referencing the key/value pair under the Secret's stringData property
####end

#The Service will expose the todo list application to the internet on port 5000, allowing you to connect to it via your browser.
#Create the Pod and Service by applying the file:

kubectl apply -f todo.yaml
#Note: You have to create the Secret before another object can reference it. This may seem obvious, but if you were to try applying all your manifests with a single command (e.g. kubectl apply -f .), Kubernetes will attempt to create the Pod before the Secret, resulting in an error during the Pod's creation.

#Access the Application
R#etrieve the load balancer's external IP address by running:

kubectl get services

#Then go to the external URL