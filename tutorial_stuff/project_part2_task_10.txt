#10. Deploy your application into GKE cluster
#Goals:
#-Install your dockerized application into GKE cluster you created.
#-Verify that your application has been successfully deployed.

#Tasks:
#-Create a deployment descriptor defining a replica set for your application.
##EXTRA: Add load balancer
####neil-node-app.yaml
#Create a load balancer type to forward traffic
apiVersion: v1
kind: Service
metadata:
  name: nginx-loadbalancer
spec:
  selector:                 # This selector references the label in the Pod
    app: neil-restapp-pod   # template spec for the Deployment
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5000
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neil-restapp-deployment
  labels:
    app: neil-restapp-pod
spec:
  selector:
    matchLabels:                # This is the label is being selected by the Deployment,
      app: neil-restapp-pod     # meaning any Pod with this label is part of this Deployment spec
  replicas: 2
  template:            
    metadata:
      labels:
        app: neil-restapp-pod   # This label must match what is specified in the selector
    spec:
      containers:
      - name: neil-restapp-container
        image: gcr.io/training-325404/gcp-restapp-neil-image:v23
        ports:
        - name: http-port
          containerPort: 5000

####end

#-Specify that you would like to run two replicas of your application.
#done above

#-In your deployment descriptor, refer to the Docker image your created previously and pushed into GCP GCR registry.
#done above

#-Use kubectl to apply your deployment descriptor into your GKE cluster.
kubectl apply -f neil-node-app.yaml

#-Use kubectl to verify that your application has been successfully deployed into GKE.
#get pods
kubectl get pods

#get all wide output
kubectl get all -o wide

#describe load balancer:
kubectl describe service/nginx-loadbalancer

###Extra - automate - have Jenkins do this
